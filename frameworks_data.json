[{"id":"cmbxaki8f0001u4wtfezu51ou","name":"ACID Properties","description":"Set of properties that guarantee database transactions are processed reliably in traditional relational databases.","category":"data_consistency","key_principles":["Atomicity: Transactions are all-or-nothing","Consistency: Database remains in valid state","Isolation: Concurrent transactions don't interfere","Durability: Committed transactions persist"],"use_cases":["Financial transaction systems","E-commerce order processing","Inventory management systems","Any system requiring strong consistency"],"tradeoffs":["Strong consistency vs. performance","ACID compliance vs. scalability","Reliability vs. speed","Complex implementation vs. data integrity"],"examples":["Bank account transfers","E-commerce checkout process","Booking systems (hotels, flights)","Medical record systems"],"resources":["https://en.wikipedia.org/wiki/ACID","https://www.databricks.com/glossary/acid-transactions"],"difficulty":"Easy","created_at":"2025-06-15T06:35:52.528Z","updated_at":"2025-06-15T07:33:22.360Z"},{"id":"cmbxaki8h0002u4wtlwdg92zo","name":"Microservices Architecture","description":"Architectural pattern that structures an application as a collection of loosely coupled, independently deployable services.","category":"architecture_patterns","key_principles":["Single responsibility per service","Decentralized governance and data management","Failure isolation and resilience","Technology diversity and team autonomy"],"use_cases":["Large-scale web applications","Organizations with multiple teams","Systems requiring different scaling patterns","Applications with diverse technology needs"],"tradeoffs":["Complexity vs. flexibility","Network latency vs. service isolation","Operational overhead vs. team autonomy","Data consistency vs. service independence"],"examples":["Netflix streaming platform","Amazon e-commerce platform","Uber ride-sharing system","Spotify music streaming"],"resources":["https://microservices.io/","https://martinfowler.com/articles/microservices.html"],"difficulty":"Hard","created_at":"2025-06-15T06:35:52.530Z","updated_at":"2025-06-15T07:33:22.365Z"},{"id":"cmbxcmg560002u4bf0l7memq0","name":"BASE Principle","description":"Alternative to ACID for distributed systems, emphasizing availability and eventual consistency over immediate consistency.","category":"data_consistency","key_principles":["Basically Available: System remains available","Soft state: Data may change over time","Eventual consistency: System becomes consistent eventually","Prioritizes availability over immediate consistency"],"use_cases":["Large-scale distributed systems","Social media platforms","Content delivery networks","Real-time analytics systems"],"tradeoffs":["Availability vs. immediate consistency","Scalability vs. data accuracy","Performance vs. complexity","User experience vs. data precision"],"examples":["Facebook news feed","Twitter timeline","Amazon product recommendations","Netflix viewing history"],"resources":["https://en.wikipedia.org/wiki/Eventual_consistency","https://www.allthingsdistributed.com/2008/12/eventually_consistent.html"],"difficulty":"Medium","created_at":"2025-06-15T07:33:22.362Z","updated_at":"2025-06-15T07:33:22.362Z"},{"id":"cmbxaki7u0000u4wtxk8dwb7o","name":"CAP Theorem","description":"Fundamental principle stating that distributed systems can only guarantee two of three properties: Consistency, Availability, and Partition tolerance.","category":"data_consistency","key_principles":["Consistency: All nodes see the same data simultaneously","Availability: System remains operational during failures","Partition tolerance: System continues despite network failures","You can only guarantee two out of three properties"],"use_cases":["Designing distributed databases","Choosing between SQL and NoSQL systems","Making tradeoffs in microservices architecture","Designing fault-tolerant systems"],"tradeoffs":["CP systems sacrifice availability for consistency","AP systems sacrifice consistency for availability","CA systems cannot handle network partitions","Real-world systems often choose eventual consistency"],"examples":["Banking systems prioritize CP (consistency + partition tolerance)","Social media feeds often choose AP (availability + partition tolerance)","Traditional RDBMS in single datacenter are CA systems"],"resources":["https://en.wikipedia.org/wiki/CAP_theorem","https://www.ibm.com/cloud/learn/cap-theorem"],"difficulty":"Medium","created_at":"2025-06-15T06:35:52.507Z","updated_at":"2025-06-15T07:33:22.344Z"},{"id":"cmbxcmg5d0005u4bf5sargezl","name":"Caching Strategies","description":"Techniques for storing frequently accessed data in fast storage to improve system performance and reduce latency.","category":"performance","key_principles":["Cache frequently accessed data","Consider cache invalidation strategies","Choose appropriate cache levels","Handle cache misses gracefully"],"use_cases":["Web application performance optimization","Database query optimization","API response caching","Static content delivery"],"tradeoffs":["Memory usage vs. performance gain","Cache consistency vs. performance","Cache complexity vs. simplicity","Cost vs. speed improvement"],"examples":["Redis for session storage","CDN for static assets","Database query result caching","Application-level caching"],"resources":["https://aws.amazon.com/caching/","https://redis.io/docs/manual/patterns/"],"difficulty":"Medium","created_at":"2025-06-15T07:33:22.369Z","updated_at":"2025-06-15T07:33:22.369Z"},{"id":"cmbxcmg5b0004u4bf3hqp65gm","name":"Load Balancing Strategies","description":"Techniques for distributing incoming requests across multiple servers to ensure optimal resource utilization and availability.","category":"scalability","key_principles":["Distribute load evenly across servers","Health checking and failover","Session affinity considerations","Geographic and latency-based routing"],"use_cases":["High-traffic web applications","API gateways","Database connection pooling","Content delivery networks"],"tradeoffs":["Round-robin vs. weighted distribution","Session stickiness vs. load distribution","Hardware vs. software load balancers","Cost vs. performance and reliability"],"examples":["AWS Application Load Balancer","NGINX load balancing","Google Cloud Load Balancing","Cloudflare load balancing"],"resources":["https://aws.amazon.com/what-is/load-balancing/","https://nginx.org/en/docs/http/load_balancing.html"],"difficulty":"Medium","created_at":"2025-06-15T07:33:22.367Z","updated_at":"2025-06-15T07:33:22.367Z"}]