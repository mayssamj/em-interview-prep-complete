generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model answers {
  id               String    @id
  user_id          String
  question_id      String
  answer_text      String
  story_references String[]
  notes            String?
  created_at       DateTime  @default(now())
  updated_at       DateTime
  questions        questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stories          stories[] @relation("StoryReferences")

  @@unique([user_id, question_id])
}

model companies {
  id                  String      @id
  name                String      @unique
  values              String[]
  evaluation_criteria String[]
  interview_format    String
  success_tips        String[]
  red_flags           String[]
  created_at          DateTime    @default(now())
  updated_at          DateTime
  questions           questions[]
}

model interview_notes {
  id                 String   @id
  user_id            String
  company            String
  interviewer_name   String?
  interviewer_role   String?
  questions_asked    String[]
  takeaways          String?
  follow_up_thoughts String?
  interview_date     DateTime
  created_at         DateTime @default(now())
  updated_at         DateTime
  users              users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model progress {
  id            String    @id
  user_id       String
  question_id   String
  status        String
  last_reviewed DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime
  questions     questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, question_id])
}

model question_views {
  id          String    @id
  user_id     String
  question_id String
  viewed_at   DateTime  @default(now())
  questions   questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model questions {
  id                      String                   @id
  company_id              String?
  category                String
  question_text           String
  difficulty              String
  is_generated            Boolean                  @default(true)
  tags                    String[]
  created_at              DateTime                 @default(now())
  updated_at              DateTime
  is_critical             Boolean                  @default(false)
  usage_count             Int                      @default(0)
  question_type           String                   @default("behavioral")
  answers                 answers[]
  progress                progress[]
  question_views          question_views[]
  companies               companies?               @relation(fields: [company_id], references: [id], onDelete: Cascade)
  system_design_answers   system_design_answers[]
  system_design_questions system_design_questions?
}

model stories {
  id         String    @id
  user_id    String
  title      String
  situation  String
  task       String
  action     String
  result     String
  reflection String?
  tags       String[]
  categories String[]
  created_at DateTime  @default(now())
  updated_at DateTime
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  answers    answers[] @relation("StoryReferences")
}

model system_design_answers {
  id                    String    @id
  user_id               String
  question_id           String
  high_level_design     String
  detailed_components   Json?
  scalability_approach  String?
  data_storage_strategy String?
  tradeoffs_discussed   String[]
  frameworks_used       String[]
  estimated_scale       String?
  notes                 String?
  created_at            DateTime  @default(now())
  updated_at            DateTime
  questions             questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  users                 users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, question_id])
}

model system_design_frameworks {
  id             String   @id
  name           String   @unique
  description    String
  category       String
  key_principles String[]
  use_cases      String[]
  tradeoffs      String[]
  examples       String[]
  resources      String[]
  difficulty     String
  created_at     DateTime @default(now())
  updated_at     DateTime
}

model system_design_questions {
  id                     String    @id
  question_id            String    @unique
  architecture_focus     String[]
  complexity_level       String
  leadership_aspects     String[]
  frameworks             String[]
  evaluation_criteria    String[]
  resources              String[]
  estimated_time_minutes Int?
  follow_up_questions    String[]
  common_mistakes        String[]
  key_tradeoffs          String[]
  created_at             DateTime  @default(now())
  updated_at             DateTime
  questions              questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model users {
  id                    String                  @id
  username              String                  @unique
  password_hash         String
  is_admin              Boolean                 @default(false)
  preferences           Json?
  created_at            DateTime                @default(now())
  updated_at            DateTime
  answers               answers[]
  interview_notes       interview_notes[]
  progress              progress[]
  question_views        question_views[]
  stories               stories[]
  system_design_answers system_design_answers[]
}
