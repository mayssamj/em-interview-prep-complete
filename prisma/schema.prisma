generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Answer {
  id               String   @id
  user_id          String
  question_id      String
  answer_text      String
  story_references String[]
  notes            String?
  created_at       DateTime @default(now())
  updated_at       DateTime
  questions        Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  users            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stories          Story[]  @relation("StoryReferences")

  @@unique([user_id, question_id])
  @@map("answers")
}

model Company {
  id                  String     @id
  name                String     @unique
  values              String[]
  evaluation_criteria String[]
  interview_format    String
  success_tips        String[]
  red_flags           String[]
  created_at          DateTime   @default(now())
  updated_at          DateTime
  questions           Question[]

  @@map("companies")
}

model InterviewNote {
  id                 String   @id
  user_id            String
  company            String
  interviewer_name   String?
  interviewer_role   String?
  questions_asked    String[]
  takeaways          String?
  follow_up_thoughts String?
  interview_date     DateTime
  created_at         DateTime @default(now())
  updated_at         DateTime
  users              User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("interview_notes")
}

model Progress {
  id            String    @id
  user_id       String
  question_id   String
  status        String
  last_reviewed DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime
  questions     Question  @relation(fields: [question_id], references: [id], onDelete: Cascade)
  users         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, question_id])
  @@map("progress")
}

model QuestionView {
  id          String   @id
  user_id     String
  question_id String
  viewed_at   DateTime @default(now())
  questions   Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  users       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("question_views")
}

model Question {
  id                      String                @id
  company_id              String?
  category                String
  question_text           String
  difficulty              String
  is_generated            Boolean               @default(true)
  tags                    String[]
  created_at              DateTime              @default(now())
  updated_at              DateTime
  is_critical             Boolean               @default(false)
  usage_count             Int                   @default(0)
  question_type           String                @default("behavioral")
  categories              String[]              @default([])
  answers                 Answer[]
  progress                Progress[]
  question_views          QuestionView[]
  companies               Company?              @relation(fields: [company_id], references: [id], onDelete: Cascade)
  system_design_answers   SystemDesignAnswer[]
  system_design_questions SystemDesignQuestion?

  @@map("questions")
}

model Story {
  id         String   @id
  user_id    String
  title      String
  situation  String
  task       String
  action     String
  result     String
  reflection String?
  tags       String[]
  categories String[]
  created_at DateTime @default(now())
  updated_at DateTime
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  answers    Answer[] @relation("StoryReferences")

  @@map("stories")
}

model SystemDesignAnswer {
  id                    String   @id
  user_id               String
  question_id           String
  high_level_design     String
  detailed_components   Json?
  scalability_approach  String?
  data_storage_strategy String?
  tradeoffs_discussed   String[]
  frameworks_used       String[]
  estimated_scale       String?
  notes                 String?
  created_at            DateTime @default(now())
  updated_at            DateTime
  questions             Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  users                 User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, question_id])
  @@map("system_design_answers")
}

model SystemDesignFramework {
  id             String   @id
  name           String   @unique
  description    String
  category       String
  key_principles String[]
  use_cases      String[]
  tradeoffs      String[]
  examples       String[]
  resources      String[]
  difficulty     String
  created_at     DateTime @default(now())
  updated_at     DateTime

  @@map("system_design_frameworks")
}

model SystemDesignQuestion {
  id                            String   @id
  question_id                   String   @unique
  architecture_focus            String[]
  complexity_level              String
  leadership_aspects            String[]
  frameworks                    String[]
  evaluation_criteria           String[]
  resources                     String[]
  estimated_time_minutes        Int?
  follow_up_questions           String[]
  common_mistakes               String[]
  key_tradeoffs                 String[]
  created_at                    DateTime @default(now())
  updated_at                    DateTime
  alternative_solutions         String[]
  back_of_envelope_calculations Json?
  clarifying_questions          String[]
  core_solution                 Json?
  functional_requirements       String[]
  key_technical_criteria        String[]
  non_functional_requirements   String[]
  problem_statement             String?
  question_title                String?
  references                    String[]
  scalability_considerations    String[]
  technology_stack              Json?
  tradeoffs                     Json?
  questions                     Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@map("system_design_questions")
}

model User {
  id                    String               @id
  username              String               @unique
  password_hash         String
  is_admin              Boolean              @default(false)
  preferences           Json?
  created_at            DateTime             @default(now())
  updated_at            DateTime
  answers               Answer[]
  interview_notes       InterviewNote[]
  progress              Progress[]
  question_views        QuestionView[]
  stories               Story[]
  system_design_answers SystemDesignAnswer[]

  @@map("users")
}
